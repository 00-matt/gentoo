--- a/feature_index.cpp
+++ b/feature_index.cpp
@@ -34,8 +34,9 @@
   std::map <std::string, std::pair<int, unsigned int> >::iterator
       it = dic_.find(key);
   if (it == dic_.end()) {
-    dic_.insert(std::make_pair<std::string, std::pair<int, unsigned int> >
-                (key, std::make_pair<int, unsigned int>(maxid_, 1)));
+    dic_.insert(std::make_pair
+                (std::string(key),
+                 std::make_pair(maxid_, static_cast<unsigned int>(1))));
     int n = maxid_;
     maxid_ += (key[0] == 'U' ? y_.size() : y_.size() * y_.size());
     return n;
@@ -171,7 +172,7 @@
     const std::string &key = it->first;
 
     if (it->second.second >= freq) {
-      old2new.insert(std::make_pair<int, int>(it->second.first, new_maxid));
+      old2new.insert(std::make_pair(it->second.first, new_maxid));
       it->second.first = new_maxid;
       new_maxid += (key[0] == 'U' ? y_.size() : y_.size() * y_.size());
       ++it;
@@ -264,9 +265,10 @@
     size_t size = tokenize(line, "\t ", column, 2);
     CHECK_FALSE(size == 2) << "format error: " << filename1;
 
-    dic_.insert(std::make_pair<std::string, std::pair<int, unsigned int> >
-                (column[1],
-                 std::make_pair<int, unsigned int>(std::atoi(column[0]), 1)));
+    dic_.insert(std::make_pair
+                (std::string(column[1]),
+                 std::make_pair(std::atoi(column[0]),
+                                static_cast<unsigned int>(1))));
   }
 
   std::vector<double> alpha;
